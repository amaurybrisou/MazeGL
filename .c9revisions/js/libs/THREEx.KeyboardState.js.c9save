{"ts":1369821479670,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// THREEx.KeyboardState.js keep the current state of the keyboard.\n// It is possible to query it at any time. No need of an event.\n// This is particularly convenient in loop driven case, like in\n// 3D demos or games.\n//\n// # Usage\n//\n// **Step 1**: Create the object\n//\n// ```var keyboard    = new THREEx.KeyboardState();```\n//\n// **Step 2**: Query the keyboard state\n//\n// This will return true if shift and A are pressed, false otherwise\n//\n// ```keyboard.pressed(\"shift+A\")```\n//\n// **Step 3**: Stop listening to the keyboard\n//\n// ```keyboard.destroy()```\n//\n// NOTE: this library may be nice as standaline. independant from three.js\n// - rename it keyboardForGame\n//\n// # Code\n//\n\n/** @namespace */\nvar THREEx\t= THREEx \t\t|| {};\n\n/**\n * - NOTE: it would be quite easy to push event-driven too\n *   - microevent.js for events handling\n *   - in this._onkeyChange, generate a string from the DOM event\n *   - use this as event name\n*/\nTHREEx.KeyboardState\t= function()\n{\n\t// to store the current state\n\tthis.keyCodes\t= {};\n\tthis.modifiers\t= {};\n\t\n\t// create callback to bind/unbind keyboard events\n\tvar self\t= this;\n\tthis._onKeyDown\t= function(event){ self._onKeyChange(event, true); };\n\tthis._onKeyUp\t= function(event){ self._onKeyChange(event, false);};\n\n\t// bind keyEvents\n\tdocument.addEventListener(\"keydown\", this._onKeyDown, false);\n\tdocument.addEventListener(\"keyup\", this._onKeyUp, false);\n}\n\n/**\n * To stop listening of the keyboard events\n*/\nTHREEx.KeyboardState.prototype.destroy\t= function()\n{\n\t// unbind keyEvents\n\tdocument.removeEventListener(\"keydown\", this._onKeyDown, false);\n\tdocument.removeEventListener(\"keyup\", this._onKeyUp, false);\n}\n\nTHREEx.KeyboardState.MODIFIERS\t= ['shift', 'ctrl', 'alt', 'meta'];\nTHREEx.KeyboardState.ALIAS\t= {\n\t'left'\t\t: 37,\n\t'up'\t\t: 38,\n\t'right'\t\t: 39,\n\t'down'\t\t: 40,\n\t'space'\t\t: 32,\n\t'pageup'\t: 33,\n\t'pagedown'\t: 34,\n\t'tab'\t\t: 9\n};\n\n/**\n * to process the keyboard dom event\n*/\nTHREEx.KeyboardState.prototype._onKeyChange\t= function(event, pressed)\n{\n\t// log to debug\n\t//console.log(\"onKeyChange\", event, pressed, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)\n\n\t// update this.keyCodes\n\tvar keyCode\t\t= event.keyCode;\n\tthis.keyCodes[keyCode]\t= pressed;\n\n\t// update this.modifiers\n\tthis.modifiers['shift']= event.shiftKey;\n\tthis.modifiers['ctrl']\t= event.ctrlKey;\n\tthis.modifiers['alt']\t= event.altKey;\n\tthis.modifiers['meta']\t= event.metaKey;\n}\n\n/**\n * query keyboard state to know if a key is pressed of not\n *\n * @param {String} keyDesc the description of the key. format : modifiers+key e.g shift+A\n * @returns {Boolean} true if the key is pressed, false otherwise\n*/\nTHREEx.KeyboardState.prototype.pressed\t= function(keyDesc)\n{\n\tvar keys\t= keyDesc.split(\"+\");\n\tfor(var i = 0; i < keys.length; i++){\n\t\tvar key\t\t= keys[i];\n\t\tvar pressed;\n\t\tif( THREEx.KeyboardState.MODIFIERS.indexOf( key ) !== -1 ){\n\t\t\tpressed\t= this.modifiers[key];\n\t\t}else if( Object.keys(THREEx.KeyboardState.ALIAS).indexOf( key ) != -1 ){\n\t\t\tpressed\t= this.keyCodes[ THREEx.KeyboardState.ALIAS[key] ];\n\t\t}else {\n\t\t\tpressed\t= this.keyCodes[key.toUpperCase().charCodeAt(0)]\n\t\t}\n\t\tif( !pressed)\treturn false;\n\t};\n\treturn true;\n}"]],"start1":0,"start2":0,"length1":0,"length2":3175}]],"length":3175}
